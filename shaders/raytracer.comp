#version 430

#define PI 3.14159265f

#define MAT_LAMBERTIAN 0
#define MAT_METAL 1
#define MAT_DIELECTRIC 2
#define MAT_DIFFUSE_LIGHT 3

#define TEX_SOLID 0
#define TEX_IMAGE 1

#define RECT_XY 0
#define RECT_XZ 1
#define RECT_YZ 2

#define NUM_SPHERES 3
#define NUM_RECTS   6

//
//  Hash Functions
//

float g_seed = 0.0f;

uint hash(uvec2 p) {
    p = 1103515245U*((p >> 1U)^(p.yx));
    uint h32 = 1103515245U*((p.x)^(p.y>>3U));
    return h32^(h32 >> 16);
}

float hash1f(inout float seed) {
    uint n = hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    return float(n)/float(0xffffffffU);
}

vec2 hash2f(inout float seed) {
    uint n = hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    uvec2 rz = uvec2(n, n*48271U);
    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);
}

vec3 hash3f(inout float seed) {
    uint n = hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));
    uvec3 rz = uvec3(n, n*16807U, n*48271U);
    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);
}

vec3 unit_sphere(inout float seed) {
    vec3 h = hash3f(seed) * vec3(2.,6.28318530718,1.)-vec3(1,0,0);
    float phi = h.y;
    float r = pow(h.z, 1./3.);
	return r * vec3(sqrt(1.-h.x*h.x)*vec2(sin(phi),cos(phi)),h.x);
}

vec2 unit_disk(inout float seed) {
    vec2 h = hash2f(seed) * vec2(1.0, 6.28318530718);
    float phi = h.y;
    float r = sqrt(h.x);
	return r * vec2(sin(phi),cos(phi));
}

vec3 unit_hemisphere(const vec3 n, inout float seed) {
    vec2 r = hash2f(seed);
	vec3  uu = normalize(cross(n, abs(n.y) > 0.5f ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0)));
	vec3  vv = cross(uu, n);
	float ra = sqrt(r.y);
	float rx = ra*cos(6.28318530718*r.x); 
	float ry = ra*sin(6.28318530718*r.x);
	float rz = sqrt(1.-r.y);
	vec3  rr = vec3(rx*uu + ry*vv + rz*n);
    return normalize(rr);
}

//
//  CAMERA
//

struct camera {
    vec3 lower_left;
    vec3 right;
    vec3 up;
    vec3 origin;
    vec3 u;
    vec3 v;
    float lens;
};

uniform int n_render;
uniform int i_seed;
uniform float height;
uniform float width;
uniform int samples;
uniform int depth;
uniform camera cam;


//
// RAY
//

struct ray {
    vec3 origin;
    vec3 direction;
};

ray get_ray(vec2 s) {
    vec2 rd = cam.lens * unit_disk(g_seed);
    vec3 off = (rd.x * cam.u) + (rd.y * cam.v);

    ray r = ray(
        cam.origin + off,
        normalize(cam.lower_left + (s.x * cam.right) + (s.y * cam.up) - cam.origin - off)
    );
    return r;
}

struct texture_ {
    int type;
    vec3 color;
};

layout (binding = 2) uniform sampler2D mercury_tex;

vec3 texture_color(const in texture_ t, const in vec2 uv) {
    if (t.type == TEX_IMAGE) {
        return vec3(texture(mercury_tex, uv));
    } 
    return t.color;
}

struct material {
    int type;
    texture_ albedo;
    texture_ emit;
    float v;
};

struct hit {
    float t;
    vec3 point;
    vec3 normal;
    vec2 uv;
    bool front;
    material mat;
};

// AABB
struct aabb {
    vec3 a;
    vec3 b;
};

bool aabb_hit(const aabb box, const ray r, float t_min, float t_max) {
    float t0, t1;
    
    for (int i = 0; i < 3; i++) {
        float inv = 1.0f / r.direction[0];
        t0 = (box.a[i] - r.origin[i]) * inv;
        t1 = (box.b[i] - r.origin[i]) * inv;
        t0 = inv < 0.0f ? t1 : t0;
        t1 = inv < 0.0f ? t0 : t1;
        if (t_max <= t_min) {
            return false;
        } 
    }
    return true;
}

//
// SPHERES
//

struct sphere {
    vec3 center;
    float radius;
    material mat;
};

bool intersect_sphere(const sphere s, const ray r, float t_min, float t_max, inout float dist) {
    vec3 oc = r.origin - s.center;
    float b = dot(oc, r.direction);
    float c = dot(oc, oc) - (s.radius * s.radius);
    float d = b * b - c;
    if (d < 0.0f) return false;

    float sq = sqrt(d);
    float t1 = -b - sq;
    float t2 = -b + sq;

    float t = t1 < t_min ? t2 : t1;
    if (t < t_max && t > t_min) {
        dist = t;
        return true;
    }
    return false;
}

bool hit_sphere(const in sphere s, const in ray r, const in float t_min, const in float t_max, inout hit h) {
    float dist;
    if (intersect_sphere(s, r, t_min, t_max, dist)) {
        h.t = dist;
        h.point = r.origin + dist * r.direction;
        h.normal = (h.point - s.center) / s.radius;
        h.mat = s.mat;

        float phi = atan(h.normal.z, h.normal.x);
        float theta = asin(h.normal.y);
        h.uv = vec2(1 - (phi + PI) / (2 * PI), (theta + (PI / 2)) / PI);
        return true;
    }
    return false;
}

// 
// RECTANGLES
//

struct rectangle {
    float a0, a1;
    float b0, b1;
    float k;
    int type;
    material mat;
};

bool dispatch_hit_rect(const in rectangle rect, const in ray r, const in float t_min, const in float t_max, inout hit h) {
    float t, a, b;
    vec3 n, p;
    if (rect.type == RECT_XY) {
        t = (rect.k - r.origin.z) / r.direction.z;
        p = r.origin + t * r.direction;
        a = p.x;
        b = p.y;
        n = vec3(0, 0, 1);
    } else if (rect.type == RECT_XZ) {
        t = (rect.k - r.origin.y) / r.direction.y;
        p = r.origin + t * r.direction;
        a = p.x;
        b = p.z;
        n = vec3(0, 1, 0);
    } else if  (rect.type == RECT_YZ) {
        t = (rect.k - r.origin.x) / r.direction.x;
        p = r.origin + t * r.direction;
        a = p.y;
        b = p.z;
        n = vec3(1, 0, 0); 
    }

    if (t < t_min || t > t_max) {
        return false;
    }
    if (a < rect.a0 || a > rect.a1 || b < rect.b0 || b > rect.b1) {
        return false;
    }
    bool face = dot(r.direction, n) < 0;
    h.t = t;
    h.point = p;
    h.normal = face ? n : -n;
    h.mat = rect.mat;
    return true;
}

float schlick(float c, float r) {
    float r0 = (1 - r) / (1 + r);
    r0 = r0 * r0;
    return r0 + (1 - r0) * pow(1 - c, 5);
}

bool mrefract(const in vec3 v, const in vec3 n, const in float s, out vec3 ref) {
    float dt = dot(v, n);
    float d = 1. - s*s*(1.-dt*dt);
    if (d > 0.0f) {
        ref = s * (v - n * dt) - n * sqrt(d);
        return true;
    } else { 
        return false;
    }
}

bool scatter_lambertian(const ray r, const hit rec, out vec3 attn, out ray scatter) {
    scatter = ray(
        rec.point,
        unit_hemisphere(rec.normal, g_seed)
    );
    attn = texture_color(rec.mat.albedo, rec.uv);
    return true;
}

bool scatter_metal(const ray r, const hit rec, out vec3 attn, out ray scatter) {
    vec3 ref = reflect(normalize(r.direction), rec.normal);
    scatter = ray(
        rec.point,
        normalize(ref + (rec.mat.v * unit_sphere(g_seed)))
    );
    attn = texture_color(rec.mat.albedo, rec.uv);
    return true;
}

bool scatter_dieletric(const ray r, const hit rec, out vec3 attn, out ray scatter) {
    vec3 refl = reflect(normalize(r.direction), rec.normal);
    float ct = dot(normalize(r.direction), rec.normal);
    
    attn = vec3(1.0f, 1.0f, 1.0f);
    vec3 outward = ct > 0.0f ? -rec.normal : rec.normal;
    float s = ct > 0.0f ? rec.mat.v : 1.0f / rec.mat.v;
    ct = ct > 0.0f ? sqrt(1.0f - rec.mat.v * rec.mat.v * (1.0f - ct * ct)) : -ct;

    vec3 refr;
    float refp;
    if (mrefract(normalize(r.direction), outward, s, refr)) {
        refp = schlick(ct, rec.mat.v);
    } else {
        refp = 1.0f;
    }

    if (hash1f(g_seed) < refp) {
        scatter = ray(
            rec.point,
            refl
        );
    } else {
        scatter = ray(
            rec.point,
            refr
        );
    }
    return true;
}

bool dispatch_scatter(const ray r, hit rec, out vec3 attn, out ray scatter) {
    if (rec.mat.type == MAT_METAL) {
        return scatter_metal(r, rec, attn, scatter);
    } else if (rec.mat.type == MAT_DIELECTRIC) {
        return scatter_dieletric(r, rec, attn, scatter);
    } else if (rec.mat.type == MAT_LAMBERTIAN){
        return scatter_lambertian(r, rec, attn, scatter);
    } 
    return false;
}

vec3 dispatch_emit(const in hit h) {
    if (h.mat.type == MAT_DIFFUSE_LIGHT) {
        return texture_color(h.mat.emit, h.uv);
    } 
    return vec3(0.0f);
}

// COLORS
texture_ t_red     = texture_(TEX_SOLID, vec3(0.65, 0.05, 0.05));
texture_ t_white   = texture_(TEX_SOLID, vec3(0.73));
texture_ t_green   = texture_(TEX_SOLID, vec3(0.12, 0.45, 0.15));
texture_ t_gold    = texture_(TEX_SOLID, vec3(0.8, 0.6, 0.2));
texture_ t_light   = texture_(TEX_SOLID, vec3(6.0));
texture_ t_none    = texture_(TEX_SOLID, vec3(0.0));
texture_ t_mercury = texture_(TEX_IMAGE, vec3(0.0));

// SPHERE MATERIALS
material gold_metal = material(MAT_METAL,         t_gold, t_none, 0.5);
material dielectric = material(MAT_DIELECTRIC,    t_none, t_none, 1.5);
material lambert    = material(MAT_LAMBERTIAN,    t_mercury, t_none, 0.0);

// LIGHT MATERIAL
material light      = material(MAT_DIFFUSE_LIGHT, t_none, t_light, 0.0);

// WALL MATERIALS
material red        = material(MAT_LAMBERTIAN,    t_red,   t_none, 0.0);
material white      = material(MAT_LAMBERTIAN,    t_white, t_none, 0.0);
material green      = material(MAT_LAMBERTIAN,    t_green, t_none, 0.0);

bool world(const ray r, float t_min, float t_max, out hit rec) {
    sphere spheres[NUM_SPHERES];
    rectangle rects[NUM_RECTS];

    // Sphere 1
    spheres[0].center = vec3(120, 110, 410);
    spheres[0].radius = 100;
    spheres[0].mat = gold_metal;

    // Sphere 2
    spheres[1].center = vec3(410.0f, 410.0f, 278.0f);
    spheres[1].radius = 80f;
    spheres[1].mat = dielectric;

    // Sphere 3
    spheres[2].center = vec3(278, 300, 278);
    spheres[2].radius = 90f;
    spheres[2].mat = lambert; 

    rects[0] = rectangle(0.0f, 555.0f, 0.0f, 555.0f, 555.0f, RECT_XY, white);
    rects[1] = rectangle(0.0f, 555.0f, 0.0f, 555.0f, 0.0f, RECT_XZ, white);
    rects[2] = rectangle(213.0f, 343.0f, 227.0f, 332.0f, 554.0f, RECT_XZ, light);
    rects[3] = rectangle(0.0f, 555.0f, 0.0f, 555.0f, 555.0f, RECT_XZ, white);
    rects[4] = rectangle(0.0f, 555.0f, 0.0f, 555.0f, 555.0f, RECT_YZ, red);
    rects[5] = rectangle(0.0f, 555.0f, 0.0f, 555.0f, 0.0f, RECT_YZ, green);

    hit temp;
    bool found = false;
    float closest = t_max;

    for (int i = 0; i < NUM_SPHERES; i++) {
        if (hit_sphere(spheres[i], r, t_min, closest, temp)) {
            found = true;
            rec = temp;
            closest = temp.t;
        }
    }

    for (int i = 0; i < NUM_RECTS; i++) {
        if (dispatch_hit_rect(rects[i], r, t_min, closest, temp)) {
            found = true;
            rec = temp;
            closest = temp.t;
        }
    }

    return found;
}

vec3 trace(ray r) {

    hit info;
    vec3 emitted = vec3(0.0f);
    vec3 col = vec3(0.0f);
    
    for (int i = 0; i < depth; i++) {
        if (world(r, 0.01, 1.0f/0.0f, info)) {
            ray scattered;
            vec3 attenuation;
            vec3 emit = dispatch_emit(info);
            emitted += i == 0 ? emit : col * emit;
            
            if (dispatch_scatter(r, info, attenuation, scattered)) {
                col = i == 0 ? attenuation : col * attenuation;
                r = scattered;
            } else {
                return emitted;
            }
	    } else {
            return emitted;
    	}
        if(dot(col,col) < 0.0001) return emitted; 
    }
    return emitted;
}

layout (local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba8) uniform image2D dest;
layout(binding = 1, rgba32f) uniform image2D src;

void main() {
    uvec2 pos = uvec2(gl_GlobalInvocationID.xy);
    g_seed = float(hash(i_seed * pos)) / float(0xffffffffU);
    
    ray r;
    float u = float(pos.x);
    float v = float(pos.y);
    vec3 col = vec3(0.0f);
    for (int i = 0; i < samples; i++) {
        vec2 s = (vec2(u, v) + hash2f(g_seed)) / vec2(float(width), float(height));

        r = get_ray(s);

        float a = 0.5 * (normalize(r.direction).y + 1.0f);
        col += trace(r); //mix(horizon, sky, a));
    }
    // Calulate total
    vec3 current_color = vec3(imageLoad(src, ivec2(pos)));
    vec3 total = current_color + col;

    // Average
    col = total / float(n_render * samples);

    // Gamma correction
    col = vec3(sqrt(col.x), sqrt(col.y), sqrt(col.z));
    
    imageStore(src, ivec2(pos), vec4(total, 1.0));
    imageStore(dest, ivec2(pos), vec4(col, 1.0));
}
